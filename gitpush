#!/bin/bash

################################################################################
################################################################################
#                            Author: Cisco Ramon                               #
#                                                                              #
#                                                                              #
# Change History                                                               #
# 01/08/2021  Cisco Ramon   This program is helpful in automating some of the  #
#                           common task that we perform on regular basis       #
#                           on git.                                            #
#                                                                              #
#                                                                              #
################################################################################
################################################################################

#These are options asigned to be used as arguments or parameters to calling script
op1="$1"
op2="$2"

#used to take multiple files
declare -A nfiles
currentDate=$(date +%b-%d)
currentTime=$(date +%H:%M)
DefaultCommit="Updated on $currentDate at $currentTime"
confirm="y"

interactiveModeMenu() {
    echo "
    1. git status
    2. git log
    3. git diff
    4. git branch
    5. git push
    6. git config
    7. clear screen
    8. exit
    "
}

interactiveMode() {
    while [ 1 == 1 ]; do
        interactiveModeMenu
        read -p "Enter your choice: " choice
        case $choice in
            1) git status ;;
            2) git log ;;
            3) git diff ;;
            6) gitConfig ;;
            7) clear ;;
            8) exit 0 ;;
            *) echo "Invalid Option!!!" ;;
        esac
    done
}

gitConfigMenu() {
    echo "
    1. show config
    2. set config
    3. back to main
    4. exit
    "
}

gitConfig() {
    while [ 1 == 1 ]
    do
        gitConfigMenu
        read -p "Enter your option: " op
        case $op in
        1) git config -l ;;
        2) 
            read -p "Enter name: " fullName
            read -p "Enter email: " email
            read -p "Save config local to repo or global (l/g): [g] " ch
            if [[ $ch == 'l' ]]; then
                git config --local user.name "$fullName"
                git config --local user.email $email
            else
                git config --global user.name "$fullName"
                git config --global user.email $email
            fi
            ;;
        3) interactiveMode ;;
        4) exit 0 ;;
        *) echo "Invalid Option!!!" ;;
        esac
    done
}

Help() {
    echo
    echo
    echo "################################################################"
    echo "#                                                              #"
    echo "# Usage: gitpush [] [--options]                                #"
    echo "# Avaiable options:                                            #"
    echo "#                                                              #"
    echo "# --default      :   called automatically if no args passed    #"
    echo "#                    (command) ->  gitpush . DefaultCommit     #"
    echo "#                    DefaultCommit is Updated on Date at Time  #"
    echo "#                                                              #"
    echo "# --help or -h   :   open help or man pages                    #"
    echo "#                                                              #"
    echo "# --files or -f  :   ask for number of files as arguments      #"
    echo "#                                                              #"
    echo "# --i            :   open interactive menu based cli           #"
    echo "#                    choose desire option (Added soon)         #"
    echo "#                                                              #"
    echo "################################################################"
    echo
    echo

}

Default() {

    echo
    echo
    echo "##########################################################"
    echo "#                  Default Mode Started                  #"
    echo "##########################################################"
    echo
    echo
    git status
    echo
    git add .
    echo
    git status
    echo
    echo
    git commit -m "$DefaultCommit"
    echo
    echo "Your commit message is :  $DefaultCommit"
    echo
    echo
    git push
    echo
    echo
    echo "##########################################################"
    echo "#                       It's Done.                       #"
    echo "##########################################################"
    echo
    echo

}

if [[ $op1 == "-i" ]]; then
    interactiveMode
fi

#To check if no parameters is passed
if [ $# == 0 ]; then
    Default
    exit 0
fi

#To check conditions for arguments and parameters
if [[ $op1 == "--help" ]]; then
    Help
    exit 0
fi

if [[ $op1 == "-h" ]]; then
    Help
    exit 0
fi

#Functino defined for git add
function add {
    if [[ $op1 == "--files" ]]; then
        read -p "Enter filenames seperated by space: " nfiles

    elif [[ $op1 == "-f" ]]; then
        read -p "Enter filenames seperated by space: " nfiles

    fi
    git add ${nfiles[*]}

}

#Function to commit
function com {
    echo "Default commmit message is: ($DefaultCommit)"
    read -p "Do you want to change it? [y]: " confirm
    if [ $confirm == "y" ]; then
        read -p "Enter your commit message: " DefaultCommit
        git commit -m "$DefaultCommit"
    else
        git commit -m "$DefaultCommit"
    fi
}

git status
echo
read -p "Press any key to continue..."
add #calling add function
echo
git status
read -p "Press any key to continue..."
echo
com
echo

git push

####################################################################
##                                                                ##
##     ###########                  ########                      ##
##         #  #    #  ######       #         ##    #  ######      ##
##        #  #    #  #            #         # #   #    #    #     ##
##        #  ######  ######       ######    #  #  #    #     #    ##
##        #  #    #  #            #         #   # #    #    #     ##
##         #  #    #  ######       #######   #    ##  #####       ##
##                                                                ##
####################################################################
